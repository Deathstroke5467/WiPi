#!/bin/bash

printm() { #array with [text to write, color]

	#add colors as (local) variables
	printf '--' "$menutext" #add auto hyphen adjustment
}

repo_add() { # "# Kali linux repositories | Added by WiPotato"
# apt-key adv --keyserver pgp.mit.edu --recv-keys ED444FF07D8D0BF6 add to function
	printf '%s\n' "-------------" "Adding ${repo[file]} Repos" "-------------" ""

#grep -Fiq "$repoadd" /etc/apt/sources.list
	if grep -iq "${repo[web]}" /etc/apt/sources.list.d/"${repo[file]}".list ; then #ignore this exit code if file doesnt exists
		printf '%s\n' "-------------------------------" "Repositories Already Installed!" "-------------------------------" ""
		sleep 2
	else
		#create list if repo does not exist
		if [ ! -f /etc/apt/sources.list.d/"${repo[file]}".list ]; then
			mkdir -p /etc/apt/sources.list.d/ && touch /etc/apt/sources.list.d/"${repo[file]}".list && chmod 644 /etc/apt/sources.list.d/"${repo[file]}".list
			printf '%s\n' "new ${repo[file]}.list file created in /etc/apt/sources.list.d/"
		fi

		if [ ! -f /etc/apt/preferences.d/"${repo[file]}".pref ]; then
			mkdir -p /etc/apt/preferences.d/ && touch /etc/apt/preferences.d/"${repo[file]}".pref && chmod 644 /etc/apt/preferences.d/"${repo[file]}".pref
			printf '%s\n' "new ${repo[name]}.pref file created in /etc/apt/preferences.d/"
		fi

		#add repo to file
		printf "deb ${repo[web]}\n# uncomment line below then'apt-get update' to enable 'apt-get source'\n#deb-src ${repo[web]}\n" > /etc/apt/sources.list.d/"${repo[file]}".list
		printf '%s\n' "${repo[file]} Repo will now be found in /etc/apt/sources.list.d/${repo[file]}.list"
		sleep 2
		#adds priority to preferences file
		printf "\nPackage: *\nPin: release n=${repo[name]}\nPin-Priority: -1" > /etc/apt/preferences.d/"${repo[file]}".pref
		#add link to man page
		printf '%s\n' "${repo[file]} preferences created in /etc/apt/sources.list.d/${repo[file]}.list with priority -1" "Use apt-get install -t ${repo[name]} to install packages from this repo" "sudo nano to change priority at own risk find more info at APT Preferences manpage"
		sleep 4
	fi
}


pack_install() { #use case statements and $1

if [ $opt -z ] ; then
	opt=0
fi

	for pkg in $packlist; do
		if dpkg --get-selections | grep -q "^$pkg[[:space:]]*install$" >/dev/null; then
				echo -e "$pkg is already installed"
				#echo "checking if packages are latest versions"
				#if [ "sudo apt-get install -t stretch -s $pkg" == ]
		elif [ $opt -eq 1 ] ; then #opt 1 installs from stretch
				echo "Option: $opt installing from stretch"
				sleep 1
				if apt-get install -y -t stretch $pkg; then #use array for repo list instead of repeating
					echo "Successfully installed $pkg"
				else
					echo "Error installing $pkg"
				fi
		elif [ $opt -eq 2 ] ; then #opt 2 installs from kali
				echo "Option: $opt installing from Kali" #use exit codes and put at end to shorten?
				sleep 1
				if apt-get install -y -t kali-rolling $pkg; then
					echo "Successfully installed $pkg"
				else
					echo "Error installing $pkg"
				fi
		else #all others install from default repo
			echo "No Option or Option: $opt installing from default repos"
			sleep 1
			if apt-get -y install $pkg; then
				echo "Successfully installed $pkg"
			else
				echo "Error installing $pkg"
			fi
		fi
	done
}

pack_install1() { #use case statements and $1

case $1 in
	1)	#opt 1 installs from stretch
		echo "Option: $1 installing from stretch"
		opt="stretch" ;;
	2)	#opt 2 installs from kali
		echo "Option: $1 installing from Kali" #use exit codes and put at end to shorten?
		opt="kali-rolling" ;;
	*)	#all others install from default repo
		echo "No Option or Option: $1 installing from default repos" ;;
esac
sleep 1

for pkg in $packlist; do
	if dpkg --get-selections | grep -q "^$pkg[[:space:]]*install$" >/dev/null; then
			echo -e "$pkg is already installed"
			#echo "checking if packages are latest versions"
			#if [ "sudo apt-get install -t stretch -s $pkg" == ]
	elif [[ ! -z $opt ]] ; then
		if apt-get install -y -t $opt $pkg ; then
			echo "Successfully installed $pkg"
		else
			echo "Error installing $pkg"
		fi
	else
		if apt-get install -y $pkg ; then
			echo "Successfully installed $pkg"
		else
			echo "Error installing $pkg"
		fi
	fi
done
}

pack_install2() { #use case statements and $1
opt=""
if [[ ! -z $1 ]] ; then
	printf '%s\n' "Installing from $1" #check if argument is a valid repo
	opt="-t $1 "
	sleep 1
fi

for pkg in $packlist; do
	if dpkg --get-selections | grep -q "^$pkg[[:space:]]*install$" >/dev/null; then
			printf '%s\n' "$pkg is already installed"
			#echo "checking if packages are latest versions"
			#if [ "sudo apt-get install -t stretch -s $pkg" == ]
	else
		if sudo apt-get install -y $opt$pkg ; then
			printf '%s\n' "Successfully installed $pkg"
		else
			printf '%s\n' "Error installing $pkg"
		fi
	fi
done
}


#options=["apt-get -y install $pkg","apt-get install -y -t stretch $pkg","apt-get install -y -t kali $pkg" ] #make constant?
#if options[$opt]; then
#		echo "Successfully installed $pkg"
#	else
#		echo "Error installing $pkg"

#what is apt-get -qq install?
